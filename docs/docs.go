// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/download/{spAddress}/{fileKey}/{signature}/{network}": {
            "get": {
                "description": "Serve file by key",
                "produces": [
                    "application/octet-stream"
                ],
                "summary": "Serve file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage Provider address",
                        "name": "spAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "file key",
                        "name": "fileKey",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage Provider signature",
                        "name": "signature",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "network type",
                        "name": "newtork",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Checking node performance",
                "summary": "Check node status",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "Status": {
                                "type": "string",
                                "description": "OK"
                            }
                        }
                    }
                }
            }
        },
        "/storage/system/{spAddress}/{signature}": {
            "get": {
                "consumes": [
                    "multipart/form-data"
                ],
                "summary": "Returns Storage Provider filesystem on \"GET\" request and refreshes filesystem on \"POST\"",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage Provider address",
                        "name": "spAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Signed Storage Provider address",
                        "name": "signature",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "summary": "Returns Storage Provider filesystem on \"GET\" request and refreshes filesystem on \"POST\"",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage Provider address",
                        "name": "spAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Signed Storage Provider address",
                        "name": "signature",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        },
        "/update_fs/{spAddress}/{signedFsys}/{network}": {
            "post": {
                "description": "Update Storage Provider's filesystem, etc. root hash, nonce, file system",
                "consumes": [
                    "application/json"
                ],
                "summary": "Update Storage Provider's filesystem",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage Provider address",
                        "name": "spAddress",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Signed Storage Provider root hash",
                        "name": "signedFsys",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "network type",
                        "name": "newtork",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "updatedFsInfo",
                        "name": "updatedFsInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fsysinfo.UpdatedFsInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload/{size}/{network}": {
            "post": {
                "description": "Save files from Storage Provider",
                "consumes": [
                    "multipart/form-data"
                ],
                "summary": "Save files",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "file size in bytes",
                        "name": "size",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "network type",
                        "name": "network",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Storage Provider address",
                        "name": "address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "signed file system root hash",
                        "name": "fsRootHash",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "current nonce",
                        "name": "nonce",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "array of hashes of all storage provider files",
                        "name": "fs",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "files parts",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "fsysinfo.UpdatedFsInfo": {
            "type": "object",
            "properties": {
                "newFs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "nonce": {
                    "type": "string"
                },
                "signedFsRootHash": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
