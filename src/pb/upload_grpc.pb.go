// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (NodeService_UploadFileClient, error)
	UpdateFs(ctx context.Context, in *FsInfo, opts ...grpc.CallOption) (*Response, error)
	DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (NodeService_DownloadFileClient, error)
	GatewayDownloadFile(ctx context.Context, in *GatewayDownloadRequest, opts ...grpc.CallOption) (NodeService_GatewayDownloadFileClient, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (NodeService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[0], "/loads.NodeService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceUploadFileClient{stream}
	return x, nil
}

type NodeService_UploadFileClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type nodeServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *nodeServiceUploadFileClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeServiceUploadFileClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) UpdateFs(ctx context.Context, in *FsInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/loads.NodeService/UpdateFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DownloadFile(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (NodeService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[1], "/loads.NodeService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_DownloadFileClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type nodeServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *nodeServiceDownloadFileClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeServiceClient) GatewayDownloadFile(ctx context.Context, in *GatewayDownloadRequest, opts ...grpc.CallOption) (NodeService_GatewayDownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeService_ServiceDesc.Streams[2], "/loads.NodeService/GatewayDownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceGatewayDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeService_GatewayDownloadFileClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type nodeServiceGatewayDownloadFileClient struct {
	grpc.ClientStream
}

func (x *nodeServiceGatewayDownloadFileClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	UploadFile(NodeService_UploadFileServer) error
	UpdateFs(context.Context, *FsInfo) (*Response, error)
	DownloadFile(*DownloadRequest, NodeService_DownloadFileServer) error
	GatewayDownloadFile(*GatewayDownloadRequest, NodeService_GatewayDownloadFileServer) error
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) UploadFile(NodeService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedNodeServiceServer) UpdateFs(context.Context, *FsInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFs not implemented")
}
func (UnimplementedNodeServiceServer) DownloadFile(*DownloadRequest, NodeService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedNodeServiceServer) GatewayDownloadFile(*GatewayDownloadRequest, NodeService_GatewayDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GatewayDownloadFile not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServiceServer).UploadFile(&nodeServiceUploadFileServer{stream})
}

type NodeService_UploadFileServer interface {
	SendAndClose(*Response) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type nodeServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *nodeServiceUploadFileServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeServiceUploadFileServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodeService_UpdateFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).UpdateFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loads.NodeService/UpdateFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).UpdateFs(ctx, req.(*FsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).DownloadFile(m, &nodeServiceDownloadFileServer{stream})
}

type NodeService_DownloadFileServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type nodeServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *nodeServiceDownloadFileServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeService_GatewayDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GatewayDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeServiceServer).GatewayDownloadFile(m, &nodeServiceGatewayDownloadFileServer{stream})
}

type NodeService_GatewayDownloadFileServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type nodeServiceGatewayDownloadFileServer struct {
	grpc.ServerStream
}

func (x *nodeServiceGatewayDownloadFileServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loads.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateFs",
			Handler:    _NodeService_UpdateFs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _NodeService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _NodeService_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GatewayDownloadFile",
			Handler:       _NodeService_GatewayDownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "upload.proto",
}
