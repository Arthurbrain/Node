// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package store

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StoreABI is the input ABI used to generate the binding from.
const StoreABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payments_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseDifficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wrong_hash\",\"type\":\"bytes32\"}],\"name\":\"wrongError\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"base_difficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payments_address\",\"type\":\"address\"}],\"name\":\"changeSystemAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"closeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_n\",\"type\":\"uint32\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRewardInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRootHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proof\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetDifficulty\",\"type\":\"uint256\"}],\"name\":\"isMatchDifficulty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isValidMerkleTreeProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payments_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user_address\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_block_number\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_user_root_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_user_root_hash_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_user_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_file\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"sendProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user_address\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_block_number\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_user_root_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_user_root_hash_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_user_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_file\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"sendProofFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setUserPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_difficulty\",\"type\":\"uint256\"}],\"name\":\"updateBaseDifficulty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user_storage_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_file\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_block_number\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_blocks_complited\",\"type\":\"uint256\"}],\"name\":\"verifyFileProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// StoreBin is the compiled bytecode used for deploying new contracts.
var StoreBin = "0x608060405260646004553480156200001657600080fd5b50604051620030343803806200303483398181016040528101906200003c91906200013e565b80336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001819055505082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000206565b6000815190506200012181620001d2565b92915050565b6000815190506200013881620001ec565b92915050565b6000806000606084860312156200015457600080fd5b6000620001648682870162000110565b9350506020620001778682870162000110565b92505060406200018a8682870162000127565b9150509250925092565b6000620001a182620001a8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620001dd8162000194565b8114620001e957600080fd5b50565b620001f781620001c8565b81146200020357600080fd5b50565b612e1e80620002166000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063dc8d0a4011610071578063dc8d0a4014610359578063e067ae4c14610375578063eb5439dc14610391578063f2fde38b146103ad578063f9a76fde146103c95761012c565b80638da5cb5b146102b557806395747678146102d3578063b5c6da27146102f1578063bf5d0a001461030d578063d2b210a1146103295761012c565b806342cbb15c116100f457806342cbb15c146101fd57806346f03dd51461021b578063695173101461023757806374556ca914610269578063812adbd8146102855761012c565b8063059dbb30146101315780631079a3261461016157806316ecc0e61461017f5780631d285f0a146101af5780632d36de7a146101df575b600080fd5b61014b60048036038101906101469190612121565b6103fa565b60405161015891906127e7565b60405180910390f35b61016961071b565b6040516101769190612682565b60405180910390f35b61019960048036038101906101949190611f4a565b610741565b6040516101a691906127e7565b60405180910390f35b6101c960048036038101906101c49190611eca565b6108cc565b6040516101d691906127e7565b60405180910390f35b6101e7610966565b6040516101f4919061298b565b60405180910390f35b61020561096c565b60405161021291906129a6565b60405180910390f35b61023560048036038101906102309190611dc2565b610974565b005b610251600480360381019061024c9190611d34565b610abc565b60405161026093929190612787565b60405180910390f35b610283600480360381019061027e9190612005565b610d17565b005b61029f600480360381019061029a9190612207565b610e5e565b6040516102ac91906127e7565b60405180910390f35b6102bd610e89565b6040516102ca9190612682565b60405180910390f35b6102db610ead565b6040516102e89190612682565b60405180910390f35b61030b600480360381019061030691906121b5565b610ed3565b005b61032760048036038101906103229190611fc9565b610f35565b005b610343600480360381019061033e9190612243565b610fd0565b6040516103509190612802565b60405180910390f35b610373600480360381019061036e9190611d34565b610fe1565b005b61038f600480360381019061038a9190611d34565b611079565b005b6103ab60048036038101906103a69190611d86565b611111565b005b6103c760048036038101906103c29190611d34565b6111ef565b005b6103e360048036038101906103de9190611d34565b61133e565b6040516103f192919061281d565b60405180910390f35b6000806000801b905060005b6002858590506104169190612a83565b8163ffffffff16101561070c57600285856002846104349190612b0e565b63ffffffff16818110610470577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135868660016002866104889190612b0e565b6104929190612a49565b63ffffffff168181106104ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040516020016104e69291906125bf565b604051602081830303815290604052604051610502919061266b565b602060405180830381855afa15801561051f573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061054291906120f8565b915060036002826105539190612b0e565b61055d9190612a49565b63ffffffff166001868690506105739190612b4c565b1115610655578185856002808561058a9190612b0e565b6105949190612a49565b63ffffffff168181106105d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135148015610640575081858560036002856105f19190612b0e565b6105fb9190612a49565b63ffffffff16818110610637577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135145b1561065057600092505050610714565b6106f9565b600280826106639190612b0e565b61066d9190612a49565b63ffffffff166001868690506106839190612b4c565b11156106f8578185856002808561069a9190612b0e565b6106a49190612a49565b63ffffffff168181106106e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135146106f757600092505050610714565b5b5b808061070490612c45565b915050610406565b508085149150505b9392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060418551141561076e576020850151925060408501519150606085015160001a90506107f4565b6040855114156107b8576040850151602086015193507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81169250601b8160ff1c019150506107f3565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea9061288b565b60405180910390fd5b5b6001600287604051610806919061266b565b602060405180830381855afa158015610823573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061084691906120f8565b828585604051600081526020016040526040516108669493929190612846565b6020604051602081039080840390855afa158015610888573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161493505050509392505050565b60008060028686898763ffffffff16406040516020016108ef9493929190612630565b60405160208183030381529060405260405161090b919061266b565b602060405180830381855afa158015610928573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061094b91906120f8565b905061095a8160001c84610e5e565b91505095945050505050565b60015481565b600043905090565b600060405180604001604052808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509050610a5f8b8a8a67ffffffffffffffff16604051602001610a069291906125eb565b60405160208183030381529060405289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610741565b610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a959061296b565b60405180910390fd5b610aae818b8b8b898989896113fa565b505050505050505050505050565b600080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663b8190977886040518263ffffffff1660e01b8152600401610b499190612682565b60206040518083038186803b158015610b6157600080fd5b505afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b999190611d5d565b905060008373ffffffffffffffffffffffffffffffffffffffff1663d4fac45d838a6040518363ffffffff1660e01b8152600401610bd892919061269d565b60206040518083038186803b158015610bf057600080fd5b505afa158015610c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2891906121de565b905060006220148082610c3b9190612a83565b905060008473ffffffffffffffffffffffffffffffffffffffff166384c706b88b6040518263ffffffff1660e01b8152600401610c789190612682565b60206040518083038186803b158015610c9057600080fd5b505afa158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc8919061226c565b905060008163ffffffff1643610cde9190612b4c565b90506000838263ffffffff16610cf49190612ab4565b90508581838063ffffffff1690509a509a509a5050505050505050509193909250565b600060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152509050610e028b8a8a67ffffffffffffffff16604051602001610da99291906125eb565b60405160208183030381529060405289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610741565b610e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e389061296b565b60405180910390fd5b610e51818b8b8b898989896113fa565b5050505050505050505050565b60008160015484610e6f9190612caa565b1015610e7e5760019050610e83565b600090505b92915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f2b57600080fd5b8060018190555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16637673fa983385856040518463ffffffff1660e01b8152600401610f999392919061270b565b600060405180830381600087803b158015610fb357600080fd5b505af1158015610fc7573d6000803e3d6000fd5b50505050505050565b60008163ffffffff16409050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e19ae7c333846040518363ffffffff1660e01b815260040161104392919061269d565b600060405180830381600087803b15801561105d57600080fd5b505af1158015611071573d6000803e3d6000fd5b505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663eac4763633846040518363ffffffff1660e01b81526004016110db92919061269d565b600060405180830381600087803b1580156110f557600080fd5b505af1158015611109573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461116957600080fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461124757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561128157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bce6325a856040518263ffffffff1660e01b81526004016113a19190612682565b604080518083038186803b1580156113b857600080fd5b505afa1580156113cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f09190612179565b9250925050915091565b600073ffffffffffffffffffffffffffffffffffffffff168860006002811061144c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015173ffffffffffffffffffffffffffffffffffffffff16141580156114e05750600073ffffffffffffffffffffffffffffffffffffffff16886001600281106114c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015173ffffffffffffffffffffffffffffffffffffffff1614155b61151f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611516906128cb565b60405180910390fd5b6115a78860016002811061155c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518960006002811061159b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518888611927565b600080600080600288886040516115bf929190612617565b602060405180830381855afa1580156115dc573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115ff91906120f8565b90506116488c60016002811061163e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151610abc565b809450819550829650505050600454436116629190612b4c565b8b63ffffffff16116116a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a09061290b565b60405180910390fd5b6116b48a87876103fa565b6116f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ea9061294b565b60405180910390fd5b61173e8c600060028110611730577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015189898e866108cc565b61177d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611774906128eb565b60405180910390fd5b858560008181106117b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581148061180a575085856001818110611800577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581145b611849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611840906128ab565b60405180910390fd5b6118d1848d600160028110611887577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200201518e6000600281106118c6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020020151866119a4565b6119198c60016002811061190e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002015143611a43565b505050505050505050505050565b6000806119338661133e565b8092508193505050808367ffffffffffffffff161015611988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197f9061292b565b60405180910390fd5b81841461199c5761199b86858588611adc565b5b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663d8add41b868686866040518563ffffffff1660e01b8152600401611a0a94939291906126c6565b600060405180830381600087803b158015611a2457600080fd5b505af1158015611a38573d6000803e3d6000fd5b505050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663c9254f6f84846040518363ffffffff1660e01b8152600401611aa59291906127be565b600060405180830381600087803b158015611abf57600080fd5b505af1158015611ad3573d6000803e3d6000fd5b50505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166335e73df4868686866040518563ffffffff1660e01b8152600401611b429493929190612742565b600060405180830381600087803b158015611b5c57600080fd5b505af1158015611b70573d6000803e3d6000fd5b505050505050505050565b6000611b8e611b89846129f2565b6129c1565b905082815260208101848484011115611ba657600080fd5b611bb1848285612c03565b509392505050565b600081359050611bc881612d75565b92915050565b600081519050611bdd81612d75565b92915050565b60008083601f840112611bf557600080fd5b8235905067ffffffffffffffff811115611c0e57600080fd5b602083019150836020820283011115611c2657600080fd5b9250929050565b600081359050611c3c81612d8c565b92915050565b600081519050611c5181612d8c565b92915050565b60008083601f840112611c6957600080fd5b8235905067ffffffffffffffff811115611c8257600080fd5b602083019150836001820283011115611c9a57600080fd5b9250929050565b600082601f830112611cb257600080fd5b8135611cc2848260208601611b7b565b91505092915050565b600081359050611cda81612da3565b92915050565b600081519050611cef81612da3565b92915050565b600081359050611d0481612dba565b92915050565b600081519050611d1981612dba565b92915050565b600081359050611d2e81612dd1565b92915050565b600060208284031215611d4657600080fd5b6000611d5484828501611bb9565b91505092915050565b600060208284031215611d6f57600080fd5b6000611d7d84828501611bce565b91505092915050565b60008060408385031215611d9957600080fd5b6000611da785828601611bb9565b9250506020611db885828601611bb9565b9150509250929050565b60008060008060008060008060008060006101008c8e031215611de457600080fd5b6000611df28e828f01611bb9565b9b50506020611e038e828f01611bb9565b9a50506040611e148e828f01611cf5565b9950506060611e258e828f01611c2d565b9850506080611e368e828f01611d1f565b97505060a08c013567ffffffffffffffff811115611e5357600080fd5b611e5f8e828f01611c57565b965096505060c08c013567ffffffffffffffff811115611e7e57600080fd5b611e8a8e828f01611c57565b945094505060e08c013567ffffffffffffffff811115611ea957600080fd5b611eb58e828f01611be3565b92509250509295989b509295989b9093969950565b600080600080600060808688031215611ee257600080fd5b6000611ef088828901611bb9565b955050602086013567ffffffffffffffff811115611f0d57600080fd5b611f1988828901611c57565b94509450506040611f2c88828901611cf5565b9250506060611f3d88828901611ccb565b9150509295509295909350565b600080600060608486031215611f5f57600080fd5b6000611f6d86828701611bb9565b935050602084013567ffffffffffffffff811115611f8a57600080fd5b611f9686828701611ca1565b925050604084013567ffffffffffffffff811115611fb357600080fd5b611fbf86828701611ca1565b9150509250925092565b60008060408385031215611fdc57600080fd5b6000611fea85828601611bb9565b9250506020611ffb85828601611ccb565b9150509250929050565b60008060008060008060008060008060e08b8d03121561202457600080fd5b60006120328d828e01611bb9565b9a505060206120438d828e01611cf5565b99505060406120548d828e01611c2d565b98505060606120658d828e01611d1f565b97505060808b013567ffffffffffffffff81111561208257600080fd5b61208e8d828e01611c57565b965096505060a08b013567ffffffffffffffff8111156120ad57600080fd5b6120b98d828e01611c57565b945094505060c08b013567ffffffffffffffff8111156120d857600080fd5b6120e48d828e01611be3565b92509250509295989b9194979a5092959850565b60006020828403121561210a57600080fd5b600061211884828501611c42565b91505092915050565b60008060006040848603121561213657600080fd5b600061214486828701611c2d565b935050602084013567ffffffffffffffff81111561216157600080fd5b61216d86828701611be3565b92509250509250925092565b6000806040838503121561218c57600080fd5b600061219a85828601611c42565b92505060206121ab85828601611ce0565b9150509250929050565b6000602082840312156121c757600080fd5b60006121d584828501611ccb565b91505092915050565b6000602082840312156121f057600080fd5b60006121fe84828501611ce0565b91505092915050565b6000806040838503121561221a57600080fd5b600061222885828601611ccb565b925050602061223985828601611ccb565b9150509250929050565b60006020828403121561225557600080fd5b600061226384828501611cf5565b91505092915050565b60006020828403121561227e57600080fd5b600061228c84828501611d0a565b91505092915050565b61229e81612b80565b82525050565b6122b56122b082612b80565b612c72565b82525050565b6122c481612b92565b82525050565b6122d381612b9e565b82525050565b6122ea6122e582612b9e565b612c84565b82525050565b60006122fc8385612a2d565b9350612309838584612c03565b82840190509392505050565b600061232082612a22565b61232a8185612a2d565b935061233a818560208601612c12565b80840191505092915050565b6000612353601f83612a38565b91507f45434453413a20696e76616c6964207369676e6174757265206c656e677468006000830152602082019050919050565b6000612393602383612a38565b91507f6e6f7420666f756e64205f66696c655f6861736820696e206d65726b6c65507260008301527f6f6f6600000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006123f9601583612a38565b91507f616464726573732063616e2774206265207a65726f00000000000000000000006000830152602082019050919050565b6000612439601483612a38565b91507f4e6f74206d6174636820646966666963756c74790000000000000000000000006000830152602082019050919050565b6000612479600d83612a38565b91507f546f6f206f6c642070726f6f66000000000000000000000000000000000000006000830152602082019050919050565b60006124b9601183612a38565b91507f546f6f206f6c6420726f6f7420686173680000000000000000000000000000006000830152602082019050919050565b60006124f9601183612a38565b91507f57726f6e67206d65726b6c6550726f6f660000000000000000000000000000006000830152602082019050919050565b6000612539600f83612a38565b91507f77726f6e67207369676e617475726500000000000000000000000000000000006000830152602082019050919050565b61257581612bc8565b82525050565b61258c61258782612bc8565b612ca0565b82525050565b61259b81612bd2565b82525050565b6125aa81612be2565b82525050565b6125b981612bf6565b82525050565b60006125cb82856122d9565b6020820191506125db82846122d9565b6020820191508190509392505050565b60006125f782856122d9565b602082019150612607828461257b565b6020820191508190509392505050565b60006126248284866122f0565b91508190509392505050565b600061263d8286886122f0565b915061264982856122a4565b60148201915061265982846122d9565b60208201915081905095945050505050565b60006126778284612315565b915081905092915050565b60006020820190506126976000830184612295565b92915050565b60006040820190506126b26000830185612295565b6126bf6020830184612295565b9392505050565b60006080820190506126db6000830187612295565b6126e86020830186612295565b6126f56040830185612295565b612702606083018461256c565b95945050505050565b60006060820190506127206000830186612295565b61272d6020830185612295565b61273a604083018461256c565b949350505050565b60006080820190506127576000830187612295565b61276460208301866122ca565b61277160408301856125a1565b61277e6060830184612295565b95945050505050565b600060608201905061279c6000830186612295565b6127a9602083018561256c565b6127b6604083018461256c565b949350505050565b60006040820190506127d36000830185612295565b6127e06020830184612592565b9392505050565b60006020820190506127fc60008301846122bb565b92915050565b600060208201905061281760008301846122ca565b92915050565b600060408201905061283260008301856122ca565b61283f602083018461256c565b9392505050565b600060808201905061285b60008301876122ca565b61286860208301866125b0565b61287560408301856122ca565b61288260608301846122ca565b95945050505050565b600060208201905081810360008301526128a481612346565b9050919050565b600060208201905081810360008301526128c481612386565b9050919050565b600060208201905081810360008301526128e4816123ec565b9050919050565b600060208201905081810360008301526129048161242c565b9050919050565b600060208201905081810360008301526129248161246c565b9050919050565b60006020820190508181036000830152612944816124ac565b9050919050565b60006020820190508181036000830152612964816124ec565b9050919050565b600060208201905081810360008301526129848161252c565b9050919050565b60006020820190506129a0600083018461256c565b92915050565b60006020820190506129bb6000830184612592565b92915050565b6000604051905081810181811067ffffffffffffffff821117156129e8576129e7612d39565b5b8060405250919050565b600067ffffffffffffffff821115612a0d57612a0c612d39565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612a5482612bd2565b9150612a5f83612bd2565b92508263ffffffff03821115612a7857612a77612cdb565b5b828201905092915050565b6000612a8e82612bc8565b9150612a9983612bc8565b925082612aa957612aa8612d0a565b5b828204905092915050565b6000612abf82612bc8565b9150612aca83612bc8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b0357612b02612cdb565b5b828202905092915050565b6000612b1982612bd2565b9150612b2483612bd2565b92508163ffffffff0483118215151615612b4157612b40612cdb565b5b828202905092915050565b6000612b5782612bc8565b9150612b6283612bc8565b925082821015612b7557612b74612cdb565b5b828203905092915050565b6000612b8b82612ba8565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612c30578082015181840152602081019050612c15565b83811115612c3f576000848401525b50505050565b6000612c5082612bd2565b915063ffffffff821415612c6757612c66612cdb565b5b600182019050919050565b6000612c7d82612c8e565b9050919050565b6000819050919050565b6000612c9982612d68565b9050919050565b6000819050919050565b6000612cb582612bc8565b9150612cc083612bc8565b925082612cd057612ccf612d0a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008160601b9050919050565b612d7e81612b80565b8114612d8957600080fd5b50565b612d9581612b9e565b8114612da057600080fd5b50565b612dac81612bc8565b8114612db757600080fd5b50565b612dc381612bd2565b8114612dce57600080fd5b50565b612dda81612be2565b8114612de557600080fd5b5056fea26469706673582212208146742a512386c20c217b76f7ebc374bcc48e6c9bf29622e388d3094a4b3a2364736f6c63430008000033"

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend, _storage_address common.Address, _payments_address common.Address, _baseDifficulty *big.Int) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StoreBin), backend, _storage_address, _payments_address, _baseDifficulty)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// BaseDifficulty is a free data retrieval call binding the contract method 0x2d36de7a.
//
// Solidity: function base_difficulty() view returns(uint256)
func (_Store *StoreCaller) BaseDifficulty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "base_difficulty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseDifficulty is a free data retrieval call binding the contract method 0x2d36de7a.
//
// Solidity: function base_difficulty() view returns(uint256)
func (_Store *StoreSession) BaseDifficulty() (*big.Int, error) {
	return _Store.Contract.BaseDifficulty(&_Store.CallOpts)
}

// BaseDifficulty is a free data retrieval call binding the contract method 0x2d36de7a.
//
// Solidity: function base_difficulty() view returns(uint256)
func (_Store *StoreCallerSession) BaseDifficulty() (*big.Int, error) {
	return _Store.Contract.BaseDifficulty(&_Store.CallOpts)
}

// GetBlockHash is a free data retrieval call binding the contract method 0xd2b210a1.
//
// Solidity: function getBlockHash(uint32 _n) view returns(bytes32)
func (_Store *StoreCaller) GetBlockHash(opts *bind.CallOpts, _n uint32) ([32]byte, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "getBlockHash", _n)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetBlockHash is a free data retrieval call binding the contract method 0xd2b210a1.
//
// Solidity: function getBlockHash(uint32 _n) view returns(bytes32)
func (_Store *StoreSession) GetBlockHash(_n uint32) ([32]byte, error) {
	return _Store.Contract.GetBlockHash(&_Store.CallOpts, _n)
}

// GetBlockHash is a free data retrieval call binding the contract method 0xd2b210a1.
//
// Solidity: function getBlockHash(uint32 _n) view returns(bytes32)
func (_Store *StoreCallerSession) GetBlockHash(_n uint32) ([32]byte, error) {
	return _Store.Contract.GetBlockHash(&_Store.CallOpts, _n)
}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint32)
func (_Store *StoreCaller) GetBlockNumber(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "getBlockNumber")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint32)
func (_Store *StoreSession) GetBlockNumber() (uint32, error) {
	return _Store.Contract.GetBlockNumber(&_Store.CallOpts)
}

// GetBlockNumber is a free data retrieval call binding the contract method 0x42cbb15c.
//
// Solidity: function getBlockNumber() view returns(uint32)
func (_Store *StoreCallerSession) GetBlockNumber() (uint32, error) {
	return _Store.Contract.GetBlockNumber(&_Store.CallOpts)
}

// GetUserRewardInfo is a free data retrieval call binding the contract method 0x69517310.
//
// Solidity: function getUserRewardInfo(address _user) view returns(address, uint256, uint256)
func (_Store *StoreCaller) GetUserRewardInfo(opts *bind.CallOpts, _user common.Address) (common.Address, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "getUserRewardInfo", _user)

	if err != nil {
		return *new(common.Address), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetUserRewardInfo is a free data retrieval call binding the contract method 0x69517310.
//
// Solidity: function getUserRewardInfo(address _user) view returns(address, uint256, uint256)
func (_Store *StoreSession) GetUserRewardInfo(_user common.Address) (common.Address, *big.Int, *big.Int, error) {
	return _Store.Contract.GetUserRewardInfo(&_Store.CallOpts, _user)
}

// GetUserRewardInfo is a free data retrieval call binding the contract method 0x69517310.
//
// Solidity: function getUserRewardInfo(address _user) view returns(address, uint256, uint256)
func (_Store *StoreCallerSession) GetUserRewardInfo(_user common.Address) (common.Address, *big.Int, *big.Int, error) {
	return _Store.Contract.GetUserRewardInfo(&_Store.CallOpts, _user)
}

// GetUserRootHash is a free data retrieval call binding the contract method 0xf9a76fde.
//
// Solidity: function getUserRootHash(address _user) view returns(bytes32, uint256)
func (_Store *StoreCaller) GetUserRootHash(opts *bind.CallOpts, _user common.Address) ([32]byte, *big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "getUserRootHash", _user)

	if err != nil {
		return *new([32]byte), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetUserRootHash is a free data retrieval call binding the contract method 0xf9a76fde.
//
// Solidity: function getUserRootHash(address _user) view returns(bytes32, uint256)
func (_Store *StoreSession) GetUserRootHash(_user common.Address) ([32]byte, *big.Int, error) {
	return _Store.Contract.GetUserRootHash(&_Store.CallOpts, _user)
}

// GetUserRootHash is a free data retrieval call binding the contract method 0xf9a76fde.
//
// Solidity: function getUserRootHash(address _user) view returns(bytes32, uint256)
func (_Store *StoreCallerSession) GetUserRootHash(_user common.Address) ([32]byte, *big.Int, error) {
	return _Store.Contract.GetUserRootHash(&_Store.CallOpts, _user)
}

// IsMatchDifficulty is a free data retrieval call binding the contract method 0x812adbd8.
//
// Solidity: function isMatchDifficulty(uint256 _proof, uint256 _targetDifficulty) view returns(bool)
func (_Store *StoreCaller) IsMatchDifficulty(opts *bind.CallOpts, _proof *big.Int, _targetDifficulty *big.Int) (bool, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "isMatchDifficulty", _proof, _targetDifficulty)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMatchDifficulty is a free data retrieval call binding the contract method 0x812adbd8.
//
// Solidity: function isMatchDifficulty(uint256 _proof, uint256 _targetDifficulty) view returns(bool)
func (_Store *StoreSession) IsMatchDifficulty(_proof *big.Int, _targetDifficulty *big.Int) (bool, error) {
	return _Store.Contract.IsMatchDifficulty(&_Store.CallOpts, _proof, _targetDifficulty)
}

// IsMatchDifficulty is a free data retrieval call binding the contract method 0x812adbd8.
//
// Solidity: function isMatchDifficulty(uint256 _proof, uint256 _targetDifficulty) view returns(bool)
func (_Store *StoreCallerSession) IsMatchDifficulty(_proof *big.Int, _targetDifficulty *big.Int) (bool, error) {
	return _Store.Contract.IsMatchDifficulty(&_Store.CallOpts, _proof, _targetDifficulty)
}

// IsValidMerkleTreeProof is a free data retrieval call binding the contract method 0x059dbb30.
//
// Solidity: function isValidMerkleTreeProof(bytes32 _root_hash, bytes32[] proof) pure returns(bool)
func (_Store *StoreCaller) IsValidMerkleTreeProof(opts *bind.CallOpts, _root_hash [32]byte, proof [][32]byte) (bool, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "isValidMerkleTreeProof", _root_hash, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidMerkleTreeProof is a free data retrieval call binding the contract method 0x059dbb30.
//
// Solidity: function isValidMerkleTreeProof(bytes32 _root_hash, bytes32[] proof) pure returns(bool)
func (_Store *StoreSession) IsValidMerkleTreeProof(_root_hash [32]byte, proof [][32]byte) (bool, error) {
	return _Store.Contract.IsValidMerkleTreeProof(&_Store.CallOpts, _root_hash, proof)
}

// IsValidMerkleTreeProof is a free data retrieval call binding the contract method 0x059dbb30.
//
// Solidity: function isValidMerkleTreeProof(bytes32 _root_hash, bytes32[] proof) pure returns(bool)
func (_Store *StoreCallerSession) IsValidMerkleTreeProof(_root_hash [32]byte, proof [][32]byte) (bool, error) {
	return _Store.Contract.IsValidMerkleTreeProof(&_Store.CallOpts, _root_hash, proof)
}

// IsValidSign is a free data retrieval call binding the contract method 0x16ecc0e6.
//
// Solidity: function isValidSign(address _signer, bytes message, bytes signature) pure returns(bool)
func (_Store *StoreCaller) IsValidSign(opts *bind.CallOpts, _signer common.Address, message []byte, signature []byte) (bool, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "isValidSign", _signer, message, signature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidSign is a free data retrieval call binding the contract method 0x16ecc0e6.
//
// Solidity: function isValidSign(address _signer, bytes message, bytes signature) pure returns(bool)
func (_Store *StoreSession) IsValidSign(_signer common.Address, message []byte, signature []byte) (bool, error) {
	return _Store.Contract.IsValidSign(&_Store.CallOpts, _signer, message, signature)
}

// IsValidSign is a free data retrieval call binding the contract method 0x16ecc0e6.
//
// Solidity: function isValidSign(address _signer, bytes message, bytes signature) pure returns(bool)
func (_Store *StoreCallerSession) IsValidSign(_signer common.Address, message []byte, signature []byte) (bool, error) {
	return _Store.Contract.IsValidSign(&_Store.CallOpts, _signer, message, signature)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Store *StoreCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Store *StoreSession) Owner() (common.Address, error) {
	return _Store.Contract.Owner(&_Store.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Store *StoreCallerSession) Owner() (common.Address, error) {
	return _Store.Contract.Owner(&_Store.CallOpts)
}

// PaymentsAddress is a free data retrieval call binding the contract method 0x95747678.
//
// Solidity: function payments_address() view returns(address)
func (_Store *StoreCaller) PaymentsAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "payments_address")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentsAddress is a free data retrieval call binding the contract method 0x95747678.
//
// Solidity: function payments_address() view returns(address)
func (_Store *StoreSession) PaymentsAddress() (common.Address, error) {
	return _Store.Contract.PaymentsAddress(&_Store.CallOpts)
}

// PaymentsAddress is a free data retrieval call binding the contract method 0x95747678.
//
// Solidity: function payments_address() view returns(address)
func (_Store *StoreCallerSession) PaymentsAddress() (common.Address, error) {
	return _Store.Contract.PaymentsAddress(&_Store.CallOpts)
}

// UserStorageAddress is a free data retrieval call binding the contract method 0x1079a326.
//
// Solidity: function user_storage_address() view returns(address)
func (_Store *StoreCaller) UserStorageAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "user_storage_address")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UserStorageAddress is a free data retrieval call binding the contract method 0x1079a326.
//
// Solidity: function user_storage_address() view returns(address)
func (_Store *StoreSession) UserStorageAddress() (common.Address, error) {
	return _Store.Contract.UserStorageAddress(&_Store.CallOpts)
}

// UserStorageAddress is a free data retrieval call binding the contract method 0x1079a326.
//
// Solidity: function user_storage_address() view returns(address)
func (_Store *StoreCallerSession) UserStorageAddress() (common.Address, error) {
	return _Store.Contract.UserStorageAddress(&_Store.CallOpts)
}

// VerifyFileProof is a free data retrieval call binding the contract method 0x1d285f0a.
//
// Solidity: function verifyFileProof(address _sender, bytes _file, uint32 _block_number, uint256 _blocks_complited) view returns(bool)
func (_Store *StoreCaller) VerifyFileProof(opts *bind.CallOpts, _sender common.Address, _file []byte, _block_number uint32, _blocks_complited *big.Int) (bool, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "verifyFileProof", _sender, _file, _block_number, _blocks_complited)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyFileProof is a free data retrieval call binding the contract method 0x1d285f0a.
//
// Solidity: function verifyFileProof(address _sender, bytes _file, uint32 _block_number, uint256 _blocks_complited) view returns(bool)
func (_Store *StoreSession) VerifyFileProof(_sender common.Address, _file []byte, _block_number uint32, _blocks_complited *big.Int) (bool, error) {
	return _Store.Contract.VerifyFileProof(&_Store.CallOpts, _sender, _file, _block_number, _blocks_complited)
}

// VerifyFileProof is a free data retrieval call binding the contract method 0x1d285f0a.
//
// Solidity: function verifyFileProof(address _sender, bytes _file, uint32 _block_number, uint256 _blocks_complited) view returns(bool)
func (_Store *StoreCallerSession) VerifyFileProof(_sender common.Address, _file []byte, _block_number uint32, _blocks_complited *big.Int) (bool, error) {
	return _Store.Contract.VerifyFileProof(&_Store.CallOpts, _sender, _file, _block_number, _blocks_complited)
}

// ChangeSystemAddresses is a paid mutator transaction binding the contract method 0xeb5439dc.
//
// Solidity: function changeSystemAddresses(address _storage_address, address _payments_address) returns()
func (_Store *StoreTransactor) ChangeSystemAddresses(opts *bind.TransactOpts, _storage_address common.Address, _payments_address common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "changeSystemAddresses", _storage_address, _payments_address)
}

// ChangeSystemAddresses is a paid mutator transaction binding the contract method 0xeb5439dc.
//
// Solidity: function changeSystemAddresses(address _storage_address, address _payments_address) returns()
func (_Store *StoreSession) ChangeSystemAddresses(_storage_address common.Address, _payments_address common.Address) (*types.Transaction, error) {
	return _Store.Contract.ChangeSystemAddresses(&_Store.TransactOpts, _storage_address, _payments_address)
}

// ChangeSystemAddresses is a paid mutator transaction binding the contract method 0xeb5439dc.
//
// Solidity: function changeSystemAddresses(address _storage_address, address _payments_address) returns()
func (_Store *StoreTransactorSession) ChangeSystemAddresses(_storage_address common.Address, _payments_address common.Address) (*types.Transaction, error) {
	return _Store.Contract.ChangeSystemAddresses(&_Store.TransactOpts, _storage_address, _payments_address)
}

// CloseDeposit is a paid mutator transaction binding the contract method 0xdc8d0a40.
//
// Solidity: function closeDeposit(address _token) returns()
func (_Store *StoreTransactor) CloseDeposit(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "closeDeposit", _token)
}

// CloseDeposit is a paid mutator transaction binding the contract method 0xdc8d0a40.
//
// Solidity: function closeDeposit(address _token) returns()
func (_Store *StoreSession) CloseDeposit(_token common.Address) (*types.Transaction, error) {
	return _Store.Contract.CloseDeposit(&_Store.TransactOpts, _token)
}

// CloseDeposit is a paid mutator transaction binding the contract method 0xdc8d0a40.
//
// Solidity: function closeDeposit(address _token) returns()
func (_Store *StoreTransactorSession) CloseDeposit(_token common.Address) (*types.Transaction, error) {
	return _Store.Contract.CloseDeposit(&_Store.TransactOpts, _token)
}

// MakeDeposit is a paid mutator transaction binding the contract method 0xbf5d0a00.
//
// Solidity: function makeDeposit(address _token, uint256 _amount) returns()
func (_Store *StoreTransactor) MakeDeposit(opts *bind.TransactOpts, _token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "makeDeposit", _token, _amount)
}

// MakeDeposit is a paid mutator transaction binding the contract method 0xbf5d0a00.
//
// Solidity: function makeDeposit(address _token, uint256 _amount) returns()
func (_Store *StoreSession) MakeDeposit(_token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.MakeDeposit(&_Store.TransactOpts, _token, _amount)
}

// MakeDeposit is a paid mutator transaction binding the contract method 0xbf5d0a00.
//
// Solidity: function makeDeposit(address _token, uint256 _amount) returns()
func (_Store *StoreTransactorSession) MakeDeposit(_token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Store.Contract.MakeDeposit(&_Store.TransactOpts, _token, _amount)
}

// SendProof is a paid mutator transaction binding the contract method 0x74556ca9.
//
// Solidity: function sendProof(address _user_address, uint32 _block_number, bytes32 _user_root_hash, uint64 _user_root_hash_nonce, bytes _user_signature, bytes _file, bytes32[] merkleProof) returns()
func (_Store *StoreTransactor) SendProof(opts *bind.TransactOpts, _user_address common.Address, _block_number uint32, _user_root_hash [32]byte, _user_root_hash_nonce uint64, _user_signature []byte, _file []byte, merkleProof [][32]byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "sendProof", _user_address, _block_number, _user_root_hash, _user_root_hash_nonce, _user_signature, _file, merkleProof)
}

// SendProof is a paid mutator transaction binding the contract method 0x74556ca9.
//
// Solidity: function sendProof(address _user_address, uint32 _block_number, bytes32 _user_root_hash, uint64 _user_root_hash_nonce, bytes _user_signature, bytes _file, bytes32[] merkleProof) returns()
func (_Store *StoreSession) SendProof(_user_address common.Address, _block_number uint32, _user_root_hash [32]byte, _user_root_hash_nonce uint64, _user_signature []byte, _file []byte, merkleProof [][32]byte) (*types.Transaction, error) {
	return _Store.Contract.SendProof(&_Store.TransactOpts, _user_address, _block_number, _user_root_hash, _user_root_hash_nonce, _user_signature, _file, merkleProof)
}

// SendProof is a paid mutator transaction binding the contract method 0x74556ca9.
//
// Solidity: function sendProof(address _user_address, uint32 _block_number, bytes32 _user_root_hash, uint64 _user_root_hash_nonce, bytes _user_signature, bytes _file, bytes32[] merkleProof) returns()
func (_Store *StoreTransactorSession) SendProof(_user_address common.Address, _block_number uint32, _user_root_hash [32]byte, _user_root_hash_nonce uint64, _user_signature []byte, _file []byte, merkleProof [][32]byte) (*types.Transaction, error) {
	return _Store.Contract.SendProof(&_Store.TransactOpts, _user_address, _block_number, _user_root_hash, _user_root_hash_nonce, _user_signature, _file, merkleProof)
}

// SendProofFrom is a paid mutator transaction binding the contract method 0x46f03dd5.
//
// Solidity: function sendProofFrom(address _node_address, address _user_address, uint32 _block_number, bytes32 _user_root_hash, uint64 _user_root_hash_nonce, bytes _user_signature, bytes _file, bytes32[] merkleProof) returns()
func (_Store *StoreTransactor) SendProofFrom(opts *bind.TransactOpts, _node_address common.Address, _user_address common.Address, _block_number uint32, _user_root_hash [32]byte, _user_root_hash_nonce uint64, _user_signature []byte, _file []byte, merkleProof [][32]byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "sendProofFrom", _node_address, _user_address, _block_number, _user_root_hash, _user_root_hash_nonce, _user_signature, _file, merkleProof)
}

// SendProofFrom is a paid mutator transaction binding the contract method 0x46f03dd5.
//
// Solidity: function sendProofFrom(address _node_address, address _user_address, uint32 _block_number, bytes32 _user_root_hash, uint64 _user_root_hash_nonce, bytes _user_signature, bytes _file, bytes32[] merkleProof) returns()
func (_Store *StoreSession) SendProofFrom(_node_address common.Address, _user_address common.Address, _block_number uint32, _user_root_hash [32]byte, _user_root_hash_nonce uint64, _user_signature []byte, _file []byte, merkleProof [][32]byte) (*types.Transaction, error) {
	return _Store.Contract.SendProofFrom(&_Store.TransactOpts, _node_address, _user_address, _block_number, _user_root_hash, _user_root_hash_nonce, _user_signature, _file, merkleProof)
}

// SendProofFrom is a paid mutator transaction binding the contract method 0x46f03dd5.
//
// Solidity: function sendProofFrom(address _node_address, address _user_address, uint32 _block_number, bytes32 _user_root_hash, uint64 _user_root_hash_nonce, bytes _user_signature, bytes _file, bytes32[] merkleProof) returns()
func (_Store *StoreTransactorSession) SendProofFrom(_node_address common.Address, _user_address common.Address, _block_number uint32, _user_root_hash [32]byte, _user_root_hash_nonce uint64, _user_signature []byte, _file []byte, merkleProof [][32]byte) (*types.Transaction, error) {
	return _Store.Contract.SendProofFrom(&_Store.TransactOpts, _node_address, _user_address, _block_number, _user_root_hash, _user_root_hash_nonce, _user_signature, _file, merkleProof)
}

// SetUserPlan is a paid mutator transaction binding the contract method 0xe067ae4c.
//
// Solidity: function setUserPlan(address _token) returns()
func (_Store *StoreTransactor) SetUserPlan(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "setUserPlan", _token)
}

// SetUserPlan is a paid mutator transaction binding the contract method 0xe067ae4c.
//
// Solidity: function setUserPlan(address _token) returns()
func (_Store *StoreSession) SetUserPlan(_token common.Address) (*types.Transaction, error) {
	return _Store.Contract.SetUserPlan(&_Store.TransactOpts, _token)
}

// SetUserPlan is a paid mutator transaction binding the contract method 0xe067ae4c.
//
// Solidity: function setUserPlan(address _token) returns()
func (_Store *StoreTransactorSession) SetUserPlan(_token common.Address) (*types.Transaction, error) {
	return _Store.Contract.SetUserPlan(&_Store.TransactOpts, _token)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Store *StoreTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Store *StoreSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Store.Contract.TransferOwnership(&_Store.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Store *StoreTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Store.Contract.TransferOwnership(&_Store.TransactOpts, newOwner)
}

// UpdateBaseDifficulty is a paid mutator transaction binding the contract method 0xb5c6da27.
//
// Solidity: function updateBaseDifficulty(uint256 _new_difficulty) returns()
func (_Store *StoreTransactor) UpdateBaseDifficulty(opts *bind.TransactOpts, _new_difficulty *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "updateBaseDifficulty", _new_difficulty)
}

// UpdateBaseDifficulty is a paid mutator transaction binding the contract method 0xb5c6da27.
//
// Solidity: function updateBaseDifficulty(uint256 _new_difficulty) returns()
func (_Store *StoreSession) UpdateBaseDifficulty(_new_difficulty *big.Int) (*types.Transaction, error) {
	return _Store.Contract.UpdateBaseDifficulty(&_Store.TransactOpts, _new_difficulty)
}

// UpdateBaseDifficulty is a paid mutator transaction binding the contract method 0xb5c6da27.
//
// Solidity: function updateBaseDifficulty(uint256 _new_difficulty) returns()
func (_Store *StoreTransactorSession) UpdateBaseDifficulty(_new_difficulty *big.Int) (*types.Transaction, error) {
	return _Store.Contract.UpdateBaseDifficulty(&_Store.TransactOpts, _new_difficulty)
}

// StoreOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Store contract.
type StoreOwnershipTransferredIterator struct {
	Event *StoreOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreOwnershipTransferred represents a OwnershipTransferred event raised by the Store contract.
type StoreOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Store *StoreFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StoreOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StoreOwnershipTransferredIterator{contract: _Store.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Store *StoreFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StoreOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreOwnershipTransferred)
				if err := _Store.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Store *StoreFilterer) ParseOwnershipTransferred(log types.Log) (*StoreOwnershipTransferred, error) {
	event := new(StoreOwnershipTransferred)
	if err := _Store.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreWrongErrorIterator is returned from FilterWrongError and is used to iterate over the raw logs and unpacked data for WrongError events raised by the Store contract.
type StoreWrongErrorIterator struct {
	Event *StoreWrongError // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreWrongErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreWrongError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreWrongError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreWrongErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreWrongErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreWrongError represents a WrongError event raised by the Store contract.
type StoreWrongError struct {
	WrongHash [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWrongError is a free log retrieval operation binding the contract event 0x93d7023aa9725055249a8ea4bce7cde913f73c0fa7730fb4a097de254fc815fc.
//
// Solidity: event wrongError(bytes32 wrong_hash)
func (_Store *StoreFilterer) FilterWrongError(opts *bind.FilterOpts) (*StoreWrongErrorIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "wrongError")
	if err != nil {
		return nil, err
	}
	return &StoreWrongErrorIterator{contract: _Store.contract, event: "wrongError", logs: logs, sub: sub}, nil
}

// WatchWrongError is a free log subscription operation binding the contract event 0x93d7023aa9725055249a8ea4bce7cde913f73c0fa7730fb4a097de254fc815fc.
//
// Solidity: event wrongError(bytes32 wrong_hash)
func (_Store *StoreFilterer) WatchWrongError(opts *bind.WatchOpts, sink chan<- *StoreWrongError) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "wrongError")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreWrongError)
				if err := _Store.contract.UnpackLog(event, "wrongError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWrongError is a log parse operation binding the contract event 0x93d7023aa9725055249a8ea4bce7cde913f73c0fa7730fb4a097de254fc815fc.
//
// Solidity: event wrongError(bytes32 wrong_hash)
func (_Store *StoreFilterer) ParseWrongError(log types.Log) (*StoreWrongError, error) {
	event := new(StoreWrongError)
	if err := _Store.contract.UnpackLog(event, "wrongError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
